/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import {Select} from '@react-three/postprocessing'


export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/models/StorySection.glb')
  const [bookHovered, setBookHovered] = useState(null);
  const [telescopeHovered, setTelescopeHovered] = useState(null);
  const [sandMoonHovered, setSandMoonHovered] = useState(null);
  const [snowMoonHovered, setSnowMoonHovered] = useState(null);
  const [volcanicMoonHovered, setVolcanicMoonHovered] = useState(null);
  const [jungleMoonHovered, setJungleMoonHovered] = useState(null);
  const [shadowMoonHovered, setShadowMoonHovered] = useState(null);
  const [boxesHovered, setBoxesHovered] = useState(null);

  return (
    <group ref={group} {...props} dispose={null}>
      <Select enabled={bookHovered}>
      <group position={[-22.33, 0.44, 51.58]} rotation={[0.02, 1.08, -0.72]} scale={[0.82, 0.22, 0.69]} onClick={props.handleModelClick} name = 'Book'
      onPointerOver={() => setBookHovered(true)} onPointerOut={() => setBookHovered(false)}>
        <mesh geometry={nodes.Cube038.geometry} material={materials.BookCase} />
        <mesh geometry={nodes.Cube038_1.geometry} material={materials.BookPages} />
        <mesh geometry={nodes.Cube038_2.geometry} material={materials.Lock} />
        <mesh geometry={nodes.Cube038_3.geometry} material={materials.TelescopeMetal} />
        <mesh geometry={nodes.Cube038_4.geometry} material={materials.BookChain} />
      </group>
      </Select>
      <Select enabled={telescopeHovered}>
      <group position={[-28.91, 1.04, 46.42]} rotation={[1.63, -0.53, 1.69]} scale={[0.15, 2.12, 0.15]} onClick={props.handleModelClick} name = 'Telescope'
      onPointerOver={() => setTelescopeHovered(true)} onPointerOut={() => setTelescopeHovered(false)}>
        <mesh geometry={nodes.Cylinder070.geometry} material={materials.TelescopeMetal} />
        <mesh geometry={nodes.Cylinder070_1.geometry} material={materials.TelescopePlastic} />
        <mesh geometry={nodes.Cylinder070_2.geometry} material={materials.TelescopeGlass} />
      </group>
      </Select>
      <Select enabled={sandMoonHovered}>
        <mesh geometry={nodes.SandMoon.geometry} material={materials.SandMoon} onClick={props.handleModelClick} name = 'Sand Moon' 
        onPointerOver={() => setSandMoonHovered(true)} onPointerOut={() => setSandMoonHovered(false)}/>
      </Select>
      <Select enabled={snowMoonHovered}>
        <mesh geometry={nodes.SnowMoon.geometry} material={materials.SnowMoon} onClick={props.handleModelClick} name = 'Snow Moon' 
        onPointerOver={() => setSnowMoonHovered(true)} onPointerOut={() => setSnowMoonHovered(false)}/>
      </Select>
      <Select enabled={volcanicMoonHovered}>
        <mesh geometry={nodes.VolcanicMoon.geometry} material={materials.VolcanicMoon} onClick={props.handleModelClick} name = 'Volcanic Moon' 
        onPointerOver={() => setVolcanicMoonHovered(true)} onPointerOut={() => setVolcanicMoonHovered(false)}/>
      </Select>
      <Select enabled={jungleMoonHovered}>
        <mesh geometry={nodes.JungleMoon.geometry} material={materials.JungleMoon}  onClick={props.handleModelClick} name = 'Jungle Moon'
        onPointerOver={() => setJungleMoonHovered(true)} onPointerOut={() => setJungleMoonHovered(false)}/>
      </Select>
      <Select enabled={shadowMoonHovered}>
        <mesh geometry={nodes.ShadowMoon.geometry} material={materials.ShadowMoon} onClick={props.handleModelClick} name = 'Shadow Moon'
        onPointerOver={() => setShadowMoonHovered(true)} onPointerOut={() => setShadowMoonHovered(false)}/>
      </Select>
      <Select enabled={boxesHovered}>
        <mesh geometry={nodes.Boxes.geometry} material={materials.WoodBox} onClick={props.handleModelClick} name = 'Boxes'
        onPointerOver={() => setBoxesHovered(true)} onPointerOut={() => setBoxesHovered(false)}/>
      </Select>
      </group>
  )
}

useGLTF.preload('/StorySection.glb')
